version: '2.2'
services:

  db:
    build: ./geonode-basemap-toolkit/pgrouting
    restart: unless-stopped
    container_name: db4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: db
        org.geonode.instance.name: geonode
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    env_file:
      - ./scripts/docker/env/${SET_DOCKER_ENV}/db.env
    networks:
      - geonode

  geoserver:
    image: geonode/geoserver:2.15.2
    restart: unless-stopped
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: geoserver
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - data-dir-conf
    volumes:
      - geoserver-data-dir:/geoserver_data/data
    env_file:
      - ./scripts/docker/env/${SET_DOCKER_ENV}/geoserver.env
    networks:
      - geonode

  django:
    restart: unless-stopped
    image: geonode/geonode:latest
    container_name: django4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: django
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - data-dir-conf
    # command: paver start_django -b 0.0.0.0:8000
    # command: uwsgi --ini uwsgi.ini
    volumes:
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data
    env_file:
      - ./scripts/docker/env/${SET_DOCKER_ENV}/django.env
    networks:
      - geonode

  geonode:
    image: geonode/nginx:${SET_DOCKER_ENV}
    restart: unless-stopped
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: nginx
        org.geonode.instance.name: geonode
    depends_on:
      - django
      - geoserver
    environment:
      - VIRTUAL_HOST=geonode.local
      - VIRTUAL_PORT=80
    volumes:
      - statics:/mnt/volumes/statics
    networks:
      - backend
      - geonode

  pgadmin4:
    image: dpage/pgadmin4
    volumes:
      - '/private/var/lib/pgadmin:/var/lib/pgadmin'
      #- '/path/to/certificate.cert:/certs/server.cert'
      #- '/path/to/certificate.key:/certs/server.key'
      - '/tmp/servers.json:/servers.json'
    environment:
      - PGADMIN_DEFAULT_EMAIL=spgeo22@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=geonode
      - VIRTUAL_HOST=pgadmin.geonode.local
      - VIRTUAL_PORT=80
    networks:
      - backend
      - geonode

  import-osm:
    build: ./geonode-basemap-toolkit/osm2pgsql
    env_file: .imports_env
    networks:
      - backend
      - geonode

  import-naturalearth:
    image: "openmaptiles/import-natural-earth:1.4"
    env_file: .imports_env
    networks:
      - backend
      - geonode

  import-water:
    image: "openmaptiles/import-water:1.1"
    env_file: .imports_env
    networks:
      - backend
      - geonode

  import-gebco:
    build: ./geonode-basemap-toolkit/shp2pgsql
    env_file: .imports_env
    networks:
      - backend
      - geonode

  import-lakelines:
    image: "openmaptiles/import-lakelines:1.0"
    env_file: .imports_env
    networks:
       - backend
       - geonode

  data-dir-conf:
    image: geonode/geoserver_data:2.15.2
    restart: on-failure
    container_name: gsconf4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: conf
        org.geonode.instance.name: geonode
    command: /bin/true
    volumes:
      - geoserver-data-dir:/geoserver_data/data
    networks:
      - geonode

volumes:
  statics:
    name: ${COMPOSE_PROJECT_NAME}-statics
  geoserver-data-dir:
    name: ${COMPOSE_PROJECT_NAME}-gsdatadir
  dbdata:
    name: ${COMPOSE_PROJECT_NAME}-dbdata
  dbbackups:
    name: ${COMPOSE_PROJECT_NAME}-dbbackups
  rabbitmq:
    name: ${COMPOSE_PROJECT_NAME}-rabbitmq

networks:
  backend:
    external:
      name: localinstall_backend
  geonode:
